---
title: "adams_mdmc"
format: html
editor: visual
---

# Adams River Watershed Modified Double Mass Curve

A modified Double Mass Curve (mDMC) ....

## Adams Watershed Boundary

Utilize hydrometric station catchment area

```{r}
library(sf)
library(bcdata)

gauged_watersheds_search <- bcdc_search("hydrometric watershed") 
View(gauged_watersheds_search)


watersheds_bc <- bcdc_query_geodata(gauged_watersheds_search[[1]]$id, crs = 3005) %>% 
  collect()

adams_gauged_catchment <- filter(watersheds_bc, SOURCE_NAME == "ADAMS RIVER")

rm(watersheds_bc, gauged_watersheds_search)

adams_catchment_wgs84 <- st_transform(adams_gauged_catchment, crs = "epsg:4326")
```

## Download Climate Data

### Temperature Data

Need temp data on a monthly scale

library(ncdf4)

```{r}
library(ecmwfr)
library(terra)

wf_set_key("2d986593-****-****-****-************", user = "tpowrie@tru.ca")

Year = 1950:2024
Month = sprintf("%02d", 1:12)
adams_coords <- BBOX(adams_catchment_wgs84)
adams_coords

request <- list(
  dataset_short_name = "reanalysis-era5-land-monthly-means",
  format = "netcdf",
  product_type = "monthly_averaged_reanalysis",
  variable = c("2m_temperature"),
  year = Year,
  month = Month,
  time = "00:00",
  area = "52.2/-120.1/50.9/-118.8",
  target = "era_t2m_monthly.nc"
  )

ncfile <- wf_request(
  user = "tpowrie@tru.ca",
  request = request,
  transfer = TRUE,
  path = "C:/Users/taypo/Documents/adams_watershed_hydro/raw_data/",
  verbose = FALSE
)

era_t2m_monthly <- rast("C:/Users/taypo/Documents/adams_watershed_hydro/raw_data/era_t2m_monthly.nc")

# The names for each layer are in UNIX time strings, so converting them into yyyy-mm format will make the layers easier to work with.

time_strings <- gsub(".*valid_time=([0-9\\-]+).*", "\\1", names(era_t2m_monthly))
time_values <- as.numeric(time_strings)
time_dates <- as.POSIXct(time_values, origin = "1970-01-01", tz = "UTC")
year_month <- format(time_dates, "%Y-%m")
names(era_t2m_monthly) <- as.character(year_month)

adams_t2m_rast <- mask(era_t2m_monthly, adams_catchment_wgs84)

adams_t2m_rast <- adams_t2m_rast - 273.15

rm(era_t2m_monthly)
```

## PET

PET = 0.1651 \* D \* Vd \* K \* N

Vd = 216.7 \* (Vs/Tave + 273.3)

Vs = 6.108 \* exp(17.26939 \* (Tave/Tave + 237.3))

### Daylength Calculation

```{r}
library(suncalc)
library(tidyverse)

# Calculate monthly average of daylength for each grid cell
sun_coords <- xyFromCell(adams_t2m_rast, 1:ncell(adams_t2m_rast))  

sun_dates <- seq.Date(as.Date("1950-01-01"), as.Date("2024-12-31"), by = "month")

sun_times <- lapply(1:nrow(sun_coords), function(i) {
  lat <- sun_coords[i, "y"]
  lon <- sun_coords[i, "x"]
  
  times <- getSunlightTimes(
    date = sun_dates, 
    lat = lat, 
    lon = lon,
    keep = c("sunrise", "sunset") 
  )
  
  time_diff <- difftime(times$sunset, times$sunrise, units = "secs")
  time_diff_hours <- as.numeric(time_diff) / 3600 
  result <- time_diff_hours / 12
  times$time_diff_hours <- time_diff_hours
  times$result_div_12 <- result
  times$month_year <- format(times$sunrise, "%Y-%m")
  
  return(times)
})

sun_times_df <- bind_rows(sun_times)

sun_times_df <- sun_times_df %>%
  select(lat, lon, month_year, result_div_12) %>%
  spread(key = month_year, value = result_div_12) 

daylength_rast <- mask(adams_t2m_rast, adams_t2m_rast)

for (i in 1:nlyr(daylength_rast)) {
  month_name <- names(daylength_rast)[i]
  
  if (month_name %in% names(sun_times_df)) {
    month_mean <- mean(sun_times_df[[month_name]], na.rm = TRUE)
    daylength_rast[[i]] <- ifel(!is.na(adams_t2m_rast[[i]]), month_mean, NA)
  }
}

rm(sun_times_df, sun_times, sun_coords)
```

### Hamon PET

```{r}
time_period <- seq(as.Date("1950-01-01"), as.Date("2024-12-01"), by = "month")

days_per_month <- as.integer(format(as.Date(time_period, "%Y-%m-%d") + lubridate::days_in_month(time_period) - 1, "%d"))

vs_rast <- 6.108 * exp(17.26939 * (adams_t2m_rast / (adams_t2m_rast + 237.3)))

vd_rast <- 216.7 * (vs_rast / (adams_t2m_rast + 273.3))

pet_hamon <- daylength_rast * NA

for (i in 1:nlyr(daylength_rast)) {
  pet_hamon[[i]] <- 0.1651 * daylength_rast[[i]] * vd_rast[[i]] * 1.3 * days_per_month[i]
}

rm(vs_rast, vd_rast)
```

## AET

### Precipitation Data

```{r}
library(ncdf4)

###

# import cdsapi

# client = cdsapi.Client()

# for year in range(1950, 2025):
  # client.retrieve(
    # 'reanalysis-era5-land',
    # {
        # 'variable': 'total_precipitation',
        # 'year': str(year),
        # 'month': [f"{m:02d}" for m in range(1, 13)]
        # 'day': [f"{d:02d}" for d in range(1, 32)],
        # 'time': [f"{h:02d}:00" for h in range(24)],
        # 'data_format': "netcdf",
        # 'download_format': "zip",
        # 'area': [52.2, -120.1, 50.9, -118.8]
    # },
  # )

###

ppt_dir <- "C:/Users/taypo/Documents/adams_watershed_hydro/raw_data/era_precip_hourly"

ppt_files <- list.files(ppt_dir, pattern = "data_\\d{4}\\.nc$", full.names = TRUE)

ppt_monthly_rasters <- list()

for (file in ppt_files) {
  r <- rast(file)
  
  time_strings <- gsub(".*valid_time=(-?[0-9]+).*", "\\1", names(r))
  time_values <- as.numeric(time_strings)
  time_dates <- as.POSIXct(time_values, origin = "1970-01-01", tz = "UTC")
  year_month <- format(time_dates, "%Y-%m")
  monthly_sum <- tapp(r, index = year_month, fun = sum, na.rm = TRUE)
  names(monthly_sum) <- unique(year_month)
  ppt_monthly_rasters[[file]] <- monthly_sum
}

era_ppt_monthly <- rast(ppt_monthly_rasters)

adams_ppt_rast <- mask(era_ppt_monthly, adams_catchment_wgs84)

adams_ppt_rast <- adams_ppt_rast * 100

rm(r, ppt_monthly_rasters, era_ppt_monthly, monthly_sum)
```

### Zhang's AET

```{r}
install.packages("remotes")
remotes::install_github("rpkgs/hydroTools")

aet_budyko <- hydroTools::ET_budyko(pet_hergreaves, ppt_raster_array, par = 2, method = "Fu1981")
aet_zhang <- hydroTools::ET_budyko(pet_hamon, adams_ppt_rast, par = 2, method = "Zhang2001")

layer_dates <- as.Date(paste0(names(aet_zhang), "-01"))

hydro_years <- ifelse(format(layer_dates, "%m") >= "10",
                      as.numeric(format(layer_dates, "%Y")) + 1,  
                      as.numeric(format(layer_dates, "%Y")))    

hydro_years <- as.factor(hydro_years)

aet_hydro_sum <- tapp(aet_zhang, index = hydro_years, fun = sum, na.rm = TRUE)

aet_hydro_year <- global(aet_hydro_sum, fun = mean, na.rm = TRUE)

rm(aet_hydro_sum, aet_zhang)
```

## Effective PPT

```{r}

ppt_names <- names(adams_ppt_rast)

years <- str_extract(ppt_names, "(?<=data_)[0-9]{4}")

# Extract the numeric month index (from _1, _2, etc.)
months <- str_extract(ppt_names, "_[0-9]+$")  # Extracts "_1", "_2", etc.
months <- str_remove(months, "_")  # Remove the underscore
months <- sprintf("%02d", as.numeric(months))  # Convert to two-digit month format

# Combine into "YYYY-MM"
year_month <- paste0(years, "-", months)

# Assign the cleaned names
names(adams_ppt_rast) <- year_month


layer_dates <- as.Date(paste0(names(adams_ppt_rast), "-01"))

hydro_years <- ifelse(format(layer_dates, "%m") >= "10",
                      as.numeric(format(layer_dates, "%Y")) + 1,  
                      as.numeric(format(layer_dates, "%Y")))    

hydro_years <- as.factor(hydro_years)

adams_ppt_hydro_sum <- tapp(adams_ppt_rast, index = hydro_years, fun = sum, na.rm = TRUE)

ppt_hydro_year <- global(adams_ppt_hydro_sum, fun = mean, na.rm = TRUE)

adams_pae <- ppt_hydro_year - aet_hydro_year

rm(adams_pae_hydro_sum, adams_ppt_hydro_sum)
```

## Annual discharge

```{r}
library(tidyhydat)
download_hydat()

hy_stn_data_coll("08LD001")

adams_hydro_data <- hy_daily_flows("08LD001")

adams_hydro_daily <- adams_hydro_data %>% 
  mutate(Discharge = (Value * 86400 * 1000)/3210000000) # 3,210,000,000 is the aea of the Adams watershed in m^2

adams_qa <- adams_hydro_daily %>%
  mutate(
    hydro_year = ifelse(month(Date) >= 10, year(Date) + 1, year(Date))
  ) %>% 
  group_by(hydro_year) %>%
  filter(hydro_year >= 1951) %>% 
  filter(!any(is.na(Discharge))) %>%  
  summarise(annual_discharge = sum(Discharge)) %>% 
  slice(1:(n() - 1))

rm(adams_hydro_data, adams_hydro_daily)
```

## Checking Autocorrelation and stationarity

```{r}
library(forecast)
library(trend)
library(tseries)
library(zoo)

adams_pae_ts <- zoo(adams_pae$mean, adams_pae$hydro_year)

adf.test(adams_pae_ts)
kpss.test(adams_pae_ts)
acf(adams_pae_ts)
pacf(adams_pae_ts)

# There is missing flow data for some hydro years, so we need to add rows for these years, with a value of 0, to complete the timeseries. 

all_years <- seq(min(adams_qa$hydro_year), max(adams_qa$hydro_year))
missing_years <- setdiff(all_years, unique(adams_qa$hydro_year))
missing_years  # This will show any missing years

missing_data <- data.frame(
  hydro_year = missing_years,
  annual_discharge = 0
)

adams_qa_complete <- bind_rows(adams_qa, missing_data)

adams_qa_complete <- adams_qa_complete %>%
  arrange(hydro_year)

adams_qa_ts <- zoo(adams_qa_complete$annual_discharge, adams_qa_complete$hydro_year)

adf.test(adams_qa_ts)
kpss.test(adams_qa_ts)
acf(adams_qa_ts)
pacf(adams_qa_ts)

# AR(1) effect detected, so need to apply prewhitening on discharge data

sen_slope <- sens.slope(adams_qa$annual_discharge, conf.level = 0.95)
sen_slope

# The sen_slope is not significantly different from 0; therefore, the data does not need to be detrended before removing AR(1) effect.

acf_result <- acf(adams_qa$annual_discharge, lag.max = 1, plot = FALSE)
r1 <- acf_result$acf[2]

# Apply Prewhitening: Remove AR(1) effect
prewhitened_qa <- adams_qa$annual_discharge[-1] - r1 * adams_qa$annual_discharge[-length(adams_qa$annual_discharge)]

acf(prewhitened_qa)

prewhitened_qa <- data.frame(hydro_year = adams_qa$hydro_year[-1], 
                                annual_discharge = prewhitened_qa)
```

## Filter Data

```{r}
adams_pae$hydro_year <- 1950:2025

valid_years <- prewhitened_qa %>%
  select(hydro_year) %>%
  distinct() %>%
  pull(hydro_year)

# Filter the precipitation dataset to match valid discharge time series
adams_pae_filtered <- adams_pae %>%
  filter(hydro_year %in% valid_years)

adams_mdmc_df <- bind_cols(prewhitened_qa, adams_pae_filtered) %>% 
  select(-4) %>% 
  rename(
    hydro_year = `hydro_year...1`,
    annual_ppt = 'mean'
  ) 
```

## Write Data

```{r}
st_write(prewhitened_qa, "C:/Users/taypo/Documents/adams_watershed_hydro/processed_data/pw_adams_qa.csv")

st_write(adams_pae, "C:/Users/taypo/Documents/adams_watershed_hydro/processed_data/adams_pae.csv")

st_write(adams_mdmc_df, "C:/Users/taypo/Documents/adams_watershed_hydro/processed_data/adams_mdmc_df.csv")
```

## mDMC Curve

```{r}
library(ggplot2)

mdmc_cumulative <- adams_mdmc_df %>%
  mutate(
    cum_pae = cumsum(annual_ppt),  
    cum_qa = cumsum(annual_discharge)  
  )

write.csv(mdmc_cumulative, "C:/Users/taypo/Documents/adams_watershed_hydro/processed_data/adams_mdmc_2025.csv")

ggplot(mdmc_cumulative, aes(x = cum_pae, y = cum_qa)) +
  geom_line() + 
  labs(
    title = "Modified Double Mass Curve",
    x = "Cumulative Effective Precipitation (mm)",
    y = "Cumulative Discharge (mm)"
  )
```

## Stats

### Pettitt's test

```{r}
mdmc_series <- zoo(mdmc_cumulative$cum_qa, mdmc_cumulative$cum_pae)

mdmc_values <- coredata(mdmc_series)

pettitt_result <- pettitt.test(mdmc_values)
print(pettitt_result)

break_index <- pettitt_result$estimate
break_precip <- mdmc_cumulative$cum_pae[break_index]  
break_discharge <- mdmc_cumulative$cum_qa[break_index]  

ggplot(mdmc_cumulative, aes(x = cum_pae, y = cum_qa)) +
  geom_line(color = "blue", size = 1.5) +  # Line for the mDMC curve
  geom_point(aes(x = break_precip, 
                 y = break_discharge), 
             color = "red", size = 3) +  # Add the breakpoint point
  labs(title = "Modified Double Mass Curve (mDMC) with Breakpoint",
       x = "Pae", 
       y = "Qa") +
  theme_minimal()
```

### Cumsum

```{r}
cusum_result <- dfcusum(final_series)
print(cusum_result)

# Extract detected change points
change_points <- cusum_result$changePoints
if (length(change_points) > 0) {
  points(cum_precip[change_points], cum_discharge[change_points], col = "purple", pch = 19, cex = 1.5)
  legend("topright", legend = "CUSUM Breakpoints", col = "purple", pch = 19)
}

```

## Linear Reg

```{r}
undisturbed_reg <- mdmc_cumulative %>%
  filter(hydro_year >= 1951 & hydro_year <= 1985)

lm_model <- lm(cum_qa ~ cum_pae, data = undisturbed_reg)

summary(lm_model)

mdmc_cumulative$predicted_discharge <- predict(lm_model, newdata = mdmc_cumulative)

ggplot(mdmc_cumulative, aes(x = cum_pae, y = cum_qa)) +
  geom_point(alpha = 0.6) +  
  geom_line(
    aes(y = predicted_discharge),  
    color = "red",
    linetype = "dashed",
    linewidth = 1.2  
  ) +
  geom_point(aes(x = break_precip, 
                 y = break_discharge), 
             color = "blue", size = 3) +
  labs(
    title = "mDMC for Adams Watershed (1950 - 2023)",
    x = "Cumulative Effective Precipitation (mm)",
    y = "Cumulative Discharge (mm)"
  )
```
